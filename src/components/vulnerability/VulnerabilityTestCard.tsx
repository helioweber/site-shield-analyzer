
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { AlertTriangle, CheckCircle, Bug, Shield, Info, ExternalLink, Database, Code, Server } from 'lucide-react';
import { VulnerabilityResult, ServerInfo } from '@/hooks/useVulnerabilityTester';

interface VulnerabilityTestCardProps {
  result: VulnerabilityResult;
  index: number;
  isExpanded: boolean;
  serverInfo: ServerInfo | null;
  onToggleExpanded: (index: number) => void;
}

const VulnerabilityTestCard = ({ 
  result, 
  index, 
  isExpanded, 
  serverInfo, 
  onToggleExpanded 
}: VulnerabilityTestCardProps) => {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'bg-red-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-blue-500 text-white';
      case 'safe': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getSeverityText = (severity: string) => {
    switch (severity) {
      case 'high': return 'Alto Risco';
      case 'medium': return 'Médio Risco';
      case 'low': return 'Baixo Risco';
      case 'safe': return 'Seguro';
      default: return 'Desconhecido';
    }
  };

  const getTestIcon = (type: string) => {
    switch (type) {
      case 'sql_injection': return <Bug className="w-4 h-4" />;
      case 'xss': return <AlertTriangle className="w-4 h-4" />;
      case 'rfi': return <ExternalLink className="w-4 h-4" />;
      case 'security_headers': return <Shield className="w-4 h-4" />;
      default: return <Shield className="w-4 h-4" />;
    }
  };

  const getTestName = (type: string) => {
    switch (type) {
      case 'sql_injection': return 'SQL Injection (OWASP A03:2021)';
      case 'xss': return 'Cross-Site Scripting (OWASP A03:2021)';
      case 'rfi': return 'Remote File Inclusion (OWASP A03:2021)';
      case 'security_headers': return 'Security Headers (OWASP A05:2021)';
      default: return 'Teste Desconhecido';
    }
  };

  return (
    <div className="border rounded-lg overflow-hidden bg-white shadow-sm">
      <div className="flex items-start space-x-3 p-4 bg-gray-50">
        <div className="flex-shrink-0 mt-0.5">
          {result.vulnerable ? (
            <AlertTriangle className="w-5 h-5 text-red-600" />
          ) : (
            <CheckCircle className="w-5 h-5 text-green-600" />
          )}
        </div>
        <div className="flex-1">
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center space-x-2">
              {getTestIcon(result.type)}
              <h5 className="font-medium text-sm">{getTestName(result.type)}</h5>
            </div>
            <div className="flex items-center space-x-2">
              <Badge className={`${getSeverityColor(result.severity)} border-none px-2 py-1 text-xs font-medium`}>
                {getSeverityText(result.severity)}
              </Badge>
              <Badge variant="outline" className="text-xs">
                {result.details.riskLevel}
              </Badge>
            </div>
          </div>
          <p className="text-xs text-gray-600 mb-3">{result.description}</p>
          
          {/* Status expandido com informações do servidor real */}
          <div className="mb-3 p-3 rounded border">
            {result.vulnerable ? (
              <div className="bg-red-50 border-red-200">
                <span className="text-xs text-red-600 font-medium flex items-center space-x-1">
                  <AlertTriangle className="w-3 h-3" />
                  <span>VULNERABILIDADE {result.details.riskLevel} DETECTADA</span>
                </span>
                <p className="text-xs text-red-600 mt-1">
                  Endpoint vulnerável detectado. Payload executado com sucesso no servidor {serverInfo?.server}.
                </p>
                <div className="mt-2 text-xs text-red-700 space-y-1">
                  <p><strong>Servidor:</strong> {serverInfo?.server}</p>
                  <p><strong>Remote Address:</strong> {serverInfo?.remoteAddress}</p>
                  <p><strong>Tempo de resposta:</strong> {result.details.responseDetails.responseTime}</p>
                </div>
              </div>
            ) : (
              <div className="bg-green-50 border-green-200">
                <span className="text-xs text-green-600 font-medium flex items-center space-x-1">
                  <CheckCircle className="w-3 h-3" />
                  <span>PROTEGIDO - Sistema seguro contra {getTestName(result.type)}</span>
                </span>
                <p className="text-xs text-green-600 mt-1">
                  Payload bloqueado efetivamente. Servidor {serverInfo?.server} configurado adequadamente.
                </p>
                <div className="mt-2 text-xs text-green-700 space-y-1">
                  <p><strong>Servidor:</strong> {serverInfo?.server}</p>
                  <p><strong>Remote Address:</strong> {serverInfo?.remoteAddress}</p>
                  <p><strong>Tempo de resposta:</strong> {result.details.responseDetails.responseTime}</p>
                </div>
              </div>
            )}
          </div>
          
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onToggleExpanded(index)}
            className="text-blue-600 hover:text-blue-800 p-0 h-auto"
          >
            <Info className="w-3 h-3 mr-1" />
            {isExpanded ? 'Ocultar relatório técnico' : 'Ver relatório técnico completo'}
          </Button>
        </div>
      </div>
      
      {isExpanded && (
        <div className="p-4 border-t bg-white space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h6 className="font-medium text-xs text-gray-700 mb-2 flex items-center space-x-1">
                <Database className="w-3 h-3" />
                <span>Metodologia do Teste:</span>
              </h6>
              <p className="text-xs text-gray-600 bg-gray-50 p-2 rounded border">{result.details.testPerformed}</p>
            </div>
            
            {result.details.payload && (
              <div>
                <h6 className="font-medium text-xs text-gray-700 mb-2 flex items-center space-x-1">
                  <Code className="w-3 h-3" />
                  <span>Payload de Teste:</span>
                </h6>
                <code className="text-xs bg-red-50 border border-red-200 p-2 rounded block text-red-800 break-all">
                  {result.details.payload}
                </code>
              </div>
            )}
          </div>
          
          {/* Requisição HTTP detalhada */}
          <div>
            <h6 className="font-medium text-xs text-gray-700 mb-2 flex items-center space-x-1">
              <Server className="w-3 h-3" />
              <span>Requisição HTTP Enviada:</span>
            </h6>
            <div className="bg-gray-50 p-3 rounded border text-xs font-mono">
              <div className="text-blue-600 font-bold mb-1">
                {result.details.requestDetails.method} {result.details.requestDetails.endpoint} HTTP/1.1
              </div>
              <pre className="whitespace-pre-wrap text-gray-700 mb-2">
                {result.details.requestDetails.headers}
              </pre>
              <div className="text-gray-500 text-xs">
                Timestamp: {new Date(result.details.requestDetails.timestamp).toLocaleString('pt-BR')}
              </div>
            </div>
          </div>
          
          {/* Resposta do servidor detalhada */}
          <div>
            <h6 className="font-medium text-xs text-gray-700 mb-2">Resposta Completa do Servidor:</h6>
            <div className="bg-gray-50 p-3 rounded border text-xs font-mono">
              <div className={`font-bold mb-1 ${result.vulnerable ? 'text-red-600' : 'text-green-600'}`}>
                HTTP/1.1 {result.details.responseDetails.statusCode}
              </div>
              <pre className="whitespace-pre-wrap text-gray-700 mb-2">
                {result.details.responseDetails.headers}
              </pre>
              {(result.details.responseDetails.body || result.details.responseDetails.bodyPreview) && (
                <div className="border-t pt-2 mt-2">
                  <strong>Response Body:</strong>
                  <pre className="whitespace-pre-wrap text-gray-600 mt-1 max-h-32 overflow-y-auto">
                    {result.details.responseDetails.body || result.details.responseDetails.bodyPreview}
                  </pre>
                </div>
              )}
            </div>
          </div>
          
          <div>
            <h6 className="font-medium text-xs text-gray-700 mb-2">Plano de Remediação:</h6>
            <div className={`text-xs p-3 rounded border whitespace-pre-line ${
              result.vulnerable ? 'bg-red-50 border-red-200 text-red-800' : 'bg-green-50 border-green-200 text-green-800'
            }`}>
              {result.details.recommendation}
            </div>
          </div>
          
          <div className="flex items-center space-x-2 pt-2 border-t">
            <ExternalLink className="w-3 h-3 text-blue-600" />
            <span className="text-xs text-blue-600 font-medium">{result.details.owaspReference}</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityTestCard;
