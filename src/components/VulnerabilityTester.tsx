
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Shield, AlertTriangle, Bug, CheckCircle, Info, ExternalLink } from 'lucide-react';

interface VulnerabilityResult {
  type: 'sql_injection' | 'xss';
  vulnerable: boolean;
  description: string;
  severity: 'high' | 'medium' | 'low' | 'safe';
  details: {
    testPerformed: string;
    payload: string;
    response: string;
    recommendation: string;
    owaspReference: string;
  };
}

interface VulnerabilityTesterProps {
  url: string;
}

const VulnerabilityTester = ({ url }: VulnerabilityTesterProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<VulnerabilityResult[]>([]);
  const [hasRun, setHasRun] = useState(false);
  const [expandedResult, setExpandedResult] = useState<number | null>(null);

  const runVulnerabilityTests = async () => {
    setIsLoading(true);
    setHasRun(true);
    
    // Simula tempo de teste
    await new Promise(resolve => setTimeout(resolve, 2500));
    
    // Simula resultados de teste baseados no OWASP Top 10
    const isVulnerableSQL = Math.random() > 0.7;
    const isVulnerableXSS = Math.random() > 0.6;
    
    const mockResults: VulnerabilityResult[] = [
      {
        type: 'sql_injection',
        vulnerable: isVulnerableSQL,
        description: 'Teste de injeção SQL em parâmetros de entrada',
        severity: isVulnerableSQL ? 'high' : 'safe',
        details: {
          testPerformed: 'Teste de SQL Injection em formulários de login e busca',
          payload: isVulnerableSQL ? "' OR '1'='1' --" : "' OR '1'='1' --",
          response: isVulnerableSQL ? 
            'Erro de SQL detectado: sintaxe SQL inválida próxima a \' OR \'1\'=\'1\' --\'' :
            'Parâmetro sanitizado corretamente, nenhuma execução de código detectada',
          recommendation: isVulnerableSQL ?
            'Implemente prepared statements, sanitize inputs e use parameterized queries' :
            'Boa prática: Continue usando prepared statements e validação de entrada',
          owaspReference: 'OWASP Top 10 2021 - A03: Injection'
        }
      },
      {
        type: 'xss',
        vulnerable: isVulnerableXSS,
        description: 'Teste de Cross-Site Scripting (XSS) em campos de entrada',
        severity: isVulnerableXSS ? 'medium' : 'safe',
        details: {
          testPerformed: 'Teste de XSS refletido e armazenado',
          payload: '<script>alert("XSS")</script>',
          response: isVulnerableXSS ?
            'Script executado com sucesso - vulnerabilidade XSS confirmada' :
            'Script bloqueado pelo Content Security Policy (CSP)',
          recommendation: isVulnerableXSS ?
            'Implemente CSP, escape HTML outputs e validação de entrada rigorosa' :
            'Boa prática: CSP ativo e sanitização adequada implementada',
          owaspReference: 'OWASP Top 10 2021 - A03: Injection'
        }
      }
    ];
    
    setResults(mockResults);
    setIsLoading(false);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'bg-red-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-blue-500 text-white';
      case 'safe': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getSeverityText = (severity: string) => {
    switch (severity) {
      case 'high': return 'Alto Risco';
      case 'medium': return 'Médio Risco';
      case 'low': return 'Baixo Risco';
      case 'safe': return 'Seguro';
      default: return 'Desconhecido';
    }
  };

  const getTestIcon = (type: string) => {
    switch (type) {
      case 'sql_injection': return <Bug className="w-4 h-4" />;
      case 'xss': return <AlertTriangle className="w-4 h-4" />;
      default: return <Shield className="w-4 h-4" />;
    }
  };

  const getTestName = (type: string) => {
    switch (type) {
      case 'sql_injection': return 'SQL Injection';
      case 'xss': return 'Cross-Site Scripting (XSS)';
      default: return 'Teste Desconhecido';
    }
  };

  return (
    <Card className="card-shadow">
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Shield className="w-5 h-5" />
          <span>Teste de Vulnerabilidades OWASP</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg border border-blue-200">
            <strong>Testes inclusos:</strong> SQL Injection e Cross-Site Scripting (XSS) baseados no OWASP Top 10
          </div>
          
          <Button 
            onClick={runVulnerabilityTests}
            disabled={isLoading}
            className="w-full"
            variant="outline"
          >
            {isLoading ? (
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div>
                <span>Executando testes de vulnerabilidade...</span>
              </div>
            ) : (
              <div className="flex items-center space-x-2">
                <Bug className="w-4 h-4" />
                <span>Executar Testes de Vulnerabilidade</span>
              </div>
            )}
          </Button>

          {hasRun && results.length > 0 && (
            <div className="space-y-4 mt-6">
              <h4 className="font-semibold text-sm text-gray-700">Resultados dos Testes</h4>
              {results.map((result, index) => (
                <div key={index} className="border rounded-lg overflow-hidden bg-white shadow-sm">
                  <div className="flex items-start space-x-3 p-4 bg-gray-50">
                    <div className="flex-shrink-0 mt-0.5">
                      {result.vulnerable ? (
                        <AlertTriangle className="w-5 h-5 text-red-600" />
                      ) : (
                        <CheckCircle className="w-5 h-5 text-green-600" />
                      )}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          {getTestIcon(result.type)}
                          <h5 className="font-medium text-sm">{getTestName(result.type)}</h5>
                        </div>
                        <Badge className={`${getSeverityColor(result.severity)} border-none px-2 py-1 text-xs font-medium`}>
                          {getSeverityText(result.severity)}
                        </Badge>
                      </div>
                      <p className="text-xs text-gray-600 mb-3">{result.description}</p>
                      <div className="mb-3">
                        {result.vulnerable ? (
                          <span className="text-xs text-red-600 font-medium">
                            ⚠️ Potencial vulnerabilidade detectada
                          </span>
                        ) : (
                          <span className="text-xs text-green-600 font-medium">
                            ✅ Nenhuma vulnerabilidade detectada
                          </span>
                        )}
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setExpandedResult(expandedResult === index ? null : index)}
                        className="text-blue-600 hover:text-blue-800 p-0 h-auto"
                      >
                        <Info className="w-3 h-3 mr-1" />
                        {expandedResult === index ? 'Ocultar detalhes' : 'Ver detalhes técnicos'}
                      </Button>
                    </div>
                  </div>
                  
                  {expandedResult === index && (
                    <div className="p-4 border-t bg-white space-y-4">
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2">Teste Realizado:</h6>
                        <p className="text-xs text-gray-600 bg-gray-50 p-2 rounded">{result.details.testPerformed}</p>
                      </div>
                      
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2">Payload Utilizado:</h6>
                        <code className="text-xs bg-red-50 border border-red-200 p-2 rounded block text-red-800">
                          {result.details.payload}
                        </code>
                      </div>
                      
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2">Resposta do Sistema:</h6>
                        <p className="text-xs text-gray-600 bg-gray-50 p-2 rounded border">{result.details.response}</p>
                      </div>
                      
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2">Recomendação:</h6>
                        <p className="text-xs text-gray-600 bg-blue-50 p-2 rounded border border-blue-200">{result.details.recommendation}</p>
                      </div>
                      
                      <div className="flex items-center space-x-2 pt-2 border-t">
                        <ExternalLink className="w-3 h-3 text-blue-600" />
                        <span className="text-xs text-blue-600 font-medium">{result.details.owaspReference}</span>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTester;
