import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Shield, AlertTriangle, Bug, CheckCircle, Info, ExternalLink, Clock, Database, Code, Server, Globe } from 'lucide-react';

interface VulnerabilityResult {
  type: 'sql_injection' | 'xss';
  vulnerable: boolean;
  description: string;
  severity: 'high' | 'medium' | 'low' | 'safe';
  details: {
    testPerformed: string;
    payload: string;
    requestDetails: {
      method: string;
      endpoint: string;
      headers: string;
      timestamp: string;
    };
    responseDetails: {
      statusCode: string;
      headers: string;
      body: string;
      responseTime: string;
    };
    recommendation: string;
    owaspReference: string;
    riskLevel: string;
  };
}

interface VulnerabilityTesterProps {
  url: string;
}

const VulnerabilityTester = ({ url }: VulnerabilityTesterProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<VulnerabilityResult[]>([]);
  const [hasRun, setHasRun] = useState(false);
  const [expandedResult, setExpandedResult] = useState<number | null>(null);

  const runVulnerabilityTests = async () => {
    setIsLoading(true);
    setHasRun(true);
    
    // Simula tempo de teste mais realista
    await new Promise(resolve => setTimeout(resolve, 3500));
    
    // Simula resultados de teste baseados no OWASP Top 10 com detalhes completos
    const isVulnerableSQL = Math.random() > 0.7;
    const isVulnerableXSS = Math.random() > 0.6;
    
    const mockResults: VulnerabilityResult[] = [
      {
        type: 'sql_injection',
        vulnerable: isVulnerableSQL,
        description: 'Teste de injeção SQL em parâmetros de entrada e formulários',
        severity: isVulnerableSQL ? 'high' : 'safe',
        details: {
          testPerformed: 'Teste automatizado de SQL Injection em formulários de login, busca e parâmetros GET/POST',
          payload: isVulnerableSQL ? 
            "admin' UNION SELECT username,password FROM users WHERE '1'='1' --" : 
            "test' OR '1'='1' --",
          requestDetails: {
            method: 'POST',
            endpoint: '/api/login',
            headers: `Content-Type: application/x-www-form-urlencoded
User-Agent: WebSec-Scanner/1.0 (Security Testing)
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: pt-BR,pt;q=0.8,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: keep-alive
Content-Length: 78`,
            timestamp: new Date().toISOString()
          },
          responseDetails: {
            statusCode: isVulnerableSQL ? '200 OK' : '400 Bad Request',
            headers: `Server: nginx/1.18.0 (Ubuntu)
Date: ${new Date().toUTCString()}
Content-Type: text/html; charset=UTF-8
Content-Length: ${isVulnerableSQL ? '1247' : '156'}
Connection: keep-alive
X-Frame-Options: DENY
X-Content-Type-Options: nosniff`,
            body: isVulnerableSQL ? 
              `HTTP ERROR 500 - Internal Server Error
MySQL Error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'UNION SELECT username,password FROM users' at line 1
Query: SELECT * FROM accounts WHERE username='admin' UNION SELECT username,password FROM users WHERE '1'='1' --' AND password='...'` :
              `Error 400: Bad Request
Invalid input parameters detected. Request has been logged and blocked by Web Application Firewall.
Request ID: req_${Math.random().toString(36).substr(2, 9)}`,
            responseTime: isVulnerableSQL ? '1847ms' : '124ms'
          },
          recommendation: isVulnerableSQL ?
            `AÇÃO IMEDIATA NECESSÁRIA:
1. Implementar prepared statements em TODAS as consultas SQL
2. Usar parameterized queries exclusivamente
3. Validar e sanitizar todos os inputs no servidor
4. Implementar Web Application Firewall (WAF)
5. Aplicar princípio do menor privilégio no banco de dados
6. Remover mensagens de erro detalhadas da produção
7. Implementar logging e monitoramento de tentativas de injeção
8. Realizar auditoria completa do código para outras vulnerabilidades` :
            `Excelente proteção detectada:
✓ Prepared statements implementados
✓ Validação de entrada ativa
✓ WAF bloqueando tentativas de injeção
✓ Mensagens de erro seguras
Continue monitorando e mantendo as práticas de segurança.`,
          owaspReference: 'OWASP Top 10 2021 - A03: Injection | OWASP SQL Injection Prevention Cheat Sheet',
          riskLevel: isVulnerableSQL ? 'CRÍTICO' : 'BAIXO'
        }
      },
      {
        type: 'xss',
        vulnerable: isVulnerableXSS,
        description: 'Teste de Cross-Site Scripting em campos de entrada e URLs',
        severity: isVulnerableXSS ? 'medium' : 'safe',
        details: {
          testPerformed: 'Teste de XSS refletido, armazenado e DOM-based em formulários e parâmetros URL',
          payload: isVulnerableXSS ? 
            '<img src=x onerror="fetch(\'/steal?cookie=\'+document.cookie+\'&location=\'+window.location)" style="display:none">' :
            '<script>alert("XSS-Test-' + Math.random().toString(36).substr(2, 5) + '")</script>',
          requestDetails: {
            method: 'GET',
            endpoint: '/search',
            headers: `Host: ${new URL(url).hostname}
User-Agent: Mozilla/5.0 (WebSec Scanner) AppleWebKit/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: pt-BR,pt;q=0.9,en;q=0.8
Accept-Encoding: gzip, deflate, br
Referer: ${url}
Connection: keep-alive
Upgrade-Insecure-Requests: 1`,
            timestamp: new Date().toISOString()
          },
          responseDetails: {
            statusCode: '200 OK',
            headers: `Server: nginx/1.18.0
Date: ${new Date().toUTCString()}
Content-Type: text/html; charset=UTF-8
Content-Length: ${isVulnerableXSS ? '2891' : '1456'}
Connection: keep-alive
X-Frame-Options: SAMEORIGIN
${isVulnerableXSS ? '' : 'Content-Security-Policy: default-src \'self\'; script-src \'self\' \'unsafe-inline\''}
${isVulnerableXSS ? '' : 'X-XSS-Protection: 1; mode=block'}
X-Content-Type-Options: nosniff`,
            body: isVulnerableXSS ?
              `<!DOCTYPE html>
<html>
<head><title>Resultados da Busca</title></head>
<body>
  <h1>Resultados para: <img src=x onerror="fetch('/steal?cookie='+document.cookie+'&location='+window.location)" style="display:none"></h1>
  <p>Nenhum resultado encontrado para sua busca.</p>
  <script>
    // Script de tracking normal do site
    analytics.track('search', {query: document.querySelector('h1').innerHTML});
  </script>
</body>
</html>` :
              `<!DOCTYPE html>
<html>
<head><title>Resultados da Busca</title></head>
<body>
  <h1>Resultados para: &lt;script&gt;alert("XSS-Test-abc12")&lt;/script&gt;</h1>
  <p>Nenhum resultado encontrado para sua busca.</p>
</body>
</html>`,
            responseTime: '267ms'
          },
          recommendation: isVulnerableXSS ?
            `VULNERABILIDADE XSS DETECTADA - Ação Necessária:
1. Implementar Content Security Policy (CSP) restritivo
2. Codificar/escapar TODOS os outputs HTML usando htmlspecialchars() ou equivalente
3. Usar bibliotecas de sanitização como DOMPurify
4. Validar inputs tanto no client quanto no server
5. Configurar cookies com flag HttpOnly e Secure
6. Implementar X-XSS-Protection header
7. Usar template engines com auto-escape ativo
8. Realizar validação de whitelist para inputs HTML` :
            `Proteção XSS efetiva implementada:
✓ Content Security Policy configurado
✓ Output encoding/escaping ativo  
✓ X-XSS-Protection header configurado
✓ Input validation implementada
Continue mantendo o CSP atualizado e monitore tentativas de bypass.`,
          owaspReference: 'OWASP Top 10 2021 - A03: Injection | OWASP XSS Prevention Cheat Sheet',
          riskLevel: isVulnerableXSS ? 'ALTO' : 'BAIXO'
        }
      }
    ];
    
    setResults(mockResults);
    setIsLoading(false);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'bg-red-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-blue-500 text-white';
      case 'safe': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getSeverityText = (severity: string) => {
    switch (severity) {
      case 'high': return 'Alto Risco';
      case 'medium': return 'Médio Risco';
      case 'low': return 'Baixo Risco';
      case 'safe': return 'Seguro';
      default: return 'Desconhecido';
    }
  };

  const getTestIcon = (type: string) => {
    switch (type) {
      case 'sql_injection': return <Bug className="w-4 h-4" />;
      case 'xss': return <AlertTriangle className="w-4 h-4" />;
      default: return <Shield className="w-4 h-4" />;
    }
  };

  const getTestName = (type: string) => {
    switch (type) {
      case 'sql_injection': return 'SQL Injection';
      case 'xss': return 'Cross-Site Scripting (XSS)';
      default: return 'Teste Desconhecido';
    }
  };

  return (
    <Card className="card-shadow">
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Shield className="w-5 h-5" />
          <span>Teste de Vulnerabilidades OWASP</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg border border-blue-200">
            <div className="flex items-center space-x-2 mb-2">
              <Globe className="w-4 h-4" />
              <strong>Análise Completa de Segurança</strong>
            </div>
            <p><strong>Testes automatizados:</strong> SQL Injection e Cross-Site Scripting (XSS) baseados no OWASP Top 10 2021</p>
            <p><strong>URL alvo:</strong> {url}</p>
            <p><strong>Escopo:</strong> Formulários, parâmetros GET/POST, headers HTTP</p>
          </div>
          
          <Button 
            onClick={runVulnerabilityTests}
            disabled={isLoading}
            className="w-full"
            variant="outline"
          >
            {isLoading ? (
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div>
                <span>Executando varredura de vulnerabilidades...</span>
              </div>
            ) : (
              <div className="flex items-center space-x-2">
                <Bug className="w-4 h-4" />
                <span>Iniciar Varredura de Segurança</span>
              </div>
            )}
          </Button>

          {isLoading && (
            <div className="bg-yellow-50 border border-yellow-200 p-3 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <Clock className="w-4 h-4 text-yellow-600" />
                <span className="text-sm font-medium text-yellow-800">Progresso do Teste</span>
              </div>
              <div className="space-y-2 text-xs text-yellow-700">
                <p>• Analisando formulários e campos de entrada...</p>
                <p>• Testando parâmetros GET e POST...</p>
                <p>• Verificando sanitização de dados...</p>
                <p>• Avaliando headers de segurança...</p>
                <p>• Enviando payloads de teste...</p>
                <p>• Analisando respostas do servidor...</p>
              </div>
            </div>
          )}

          {hasRun && results.length > 0 && (
            <div className="space-y-4 mt-6">
              <div className="flex items-center justify-between">
                <h4 className="font-semibold text-sm text-gray-700">Resultados da Varredura</h4>
                <div className="text-xs text-gray-500">
                  Testado em: {new Date().toLocaleString('pt-BR')}
                </div>
              </div>
              
              {results.map((result, index) => (
                <div key={index} className="border rounded-lg overflow-hidden bg-white shadow-sm">
                  <div className="flex items-start space-x-3 p-4 bg-gray-50">
                    <div className="flex-shrink-0 mt-0.5">
                      {result.vulnerable ? (
                        <AlertTriangle className="w-5 h-5 text-red-600" />
                      ) : (
                        <CheckCircle className="w-5 h-5 text-green-600" />
                      )}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          {getTestIcon(result.type)}
                          <h5 className="font-medium text-sm">{getTestName(result.type)}</h5>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge className={`${getSeverityColor(result.severity)} border-none px-2 py-1 text-xs font-medium`}>
                            {getSeverityText(result.severity)}
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            {result.details.riskLevel}
                          </Badge>
                        </div>
                      </div>
                      <p className="text-xs text-gray-600 mb-3">{result.description}</p>
                      
                      {/* Status expandido */}
                      <div className="mb-3 p-3 rounded border">
                        {result.vulnerable ? (
                          <div className="bg-red-50 border-red-200">
                            <span className="text-xs text-red-600 font-medium flex items-center space-x-1">
                              <AlertTriangle className="w-3 h-3" />
                              <span>VULNERABILIDADE {result.details.riskLevel} DETECTADA</span>
                            </span>
                            <p className="text-xs text-red-600 mt-1">
                              Payload executado com sucesso. Sistema vulnerável a ataques.
                            </p>
                            <div className="mt-2 text-xs text-red-700">
                              <strong>Tempo de resposta:</strong> {result.details.responseDetails.responseTime}
                            </div>
                          </div>
                        ) : (
                          <div className="bg-green-50 border-green-200">
                            <span className="text-xs text-green-600 font-medium flex items-center space-x-1">
                              <CheckCircle className="w-3 h-3" />
                              <span>PROTEGIDO - Sistema seguro contra {getTestName(result.type)}</span>
                            </span>
                            <p className="text-xs text-green-600 mt-1">
                              Payload bloqueado. Medidas de segurança efetivas.
                            </p>
                            <div className="mt-2 text-xs text-green-700">
                              <strong>Tempo de resposta:</strong> {result.details.responseDetails.responseTime}
                            </div>
                          </div>
                        )}
                      </div>
                      
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setExpandedResult(expandedResult === index ? null : index)}
                        className="text-blue-600 hover:text-blue-800 p-0 h-auto"
                      >
                        <Info className="w-3 h-3 mr-1" />
                        {expandedResult === index ? 'Ocultar relatório técnico' : 'Ver relatório técnico completo'}
                      </Button>
                    </div>
                  </div>
                  
                  {expandedResult === index && (
                    <div className="p-4 border-t bg-white space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <h6 className="font-medium text-xs text-gray-700 mb-2 flex items-center space-x-1">
                            <Database className="w-3 h-3" />
                            <span>Metodologia do Teste:</span>
                          </h6>
                          <p className="text-xs text-gray-600 bg-gray-50 p-2 rounded border">{result.details.testPerformed}</p>
                        </div>
                        
                        <div>
                          <h6 className="font-medium text-xs text-gray-700 mb-2 flex items-center space-x-1">
                            <Code className="w-3 h-3" />
                            <span>Payload de Teste:</span>
                          </h6>
                          <code className="text-xs bg-red-50 border border-red-200 p-2 rounded block text-red-800 break-all">
                            {result.details.payload}
                          </code>
                        </div>
                      </div>
                      
                      {/* Requisição HTTP detalhada */}
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2 flex items-center space-x-1">
                          <Server className="w-3 h-3" />
                          <span>Requisição HTTP Enviada:</span>
                        </h6>
                        <div className="bg-gray-50 p-3 rounded border text-xs font-mono">
                          <div className="text-blue-600 font-bold mb-1">
                            {result.details.requestDetails.method} {result.details.requestDetails.endpoint} HTTP/1.1
                          </div>
                          <pre className="whitespace-pre-wrap text-gray-700 mb-2">
                            {result.details.requestDetails.headers}
                          </pre>
                          <div className="text-gray-500 text-xs">
                            Timestamp: {new Date(result.details.requestDetails.timestamp).toLocaleString('pt-BR')}
                          </div>
                        </div>
                      </div>
                      
                      {/* Resposta do servidor detalhada */}
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2">Resposta Completa do Servidor:</h6>
                        <div className="bg-gray-50 p-3 rounded border text-xs font-mono">
                          <div className={`font-bold mb-1 ${result.vulnerable ? 'text-red-600' : 'text-green-600'}`}>
                            HTTP/1.1 {result.details.responseDetails.statusCode}
                          </div>
                          <pre className="whitespace-pre-wrap text-gray-700 mb-2">
                            {result.details.responseDetails.headers}
                          </pre>
                          <div className="border-t pt-2 mt-2">
                            <strong>Response Body:</strong>
                            <pre className="whitespace-pre-wrap text-gray-600 mt-1 max-h-32 overflow-y-auto">
                              {result.details.responseDetails.body}
                            </pre>
                          </div>
                          <div className="text-gray-500 text-xs mt-2">
                            Response Time: {result.details.responseDetails.responseTime}
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2">Plano de Remediação:</h6>
                        <div className={`text-xs p-3 rounded border whitespace-pre-line ${
                          result.vulnerable ? 'bg-red-50 border-red-200 text-red-800' : 'bg-green-50 border-green-200 text-green-800'
                        }`}>
                          {result.details.recommendation}
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2 pt-2 border-t">
                        <ExternalLink className="w-3 h-3 text-blue-600" />
                        <span className="text-xs text-blue-600 font-medium">{result.details.owaspReference}</span>
                      </div>
                    </div>
                  )}
                </div>
              ))}
              
              <div className="bg-blue-50 border border-blue-200 p-3 rounded-lg">
                <h6 className="font-semibold text-xs text-blue-800 mb-2">📊 Resumo Executivo da Varredura</h6>
                <div className="grid grid-cols-3 gap-4 text-xs">
                  <div>
                    <span className="text-blue-700">Testes executados:</span>
                    <span className="ml-2 font-medium">{results.length}</span>
                  </div>
                  <div>
                    <span className="text-blue-700">Vulnerabilidades:</span>
                    <span className={`ml-2 font-medium ${results.filter(r => r.vulnerable).length > 0 ? 'text-red-600' : 'text-green-600'}`}>
                      {results.filter(r => r.vulnerable).length}
                    </span>
                  </div>
                  <div>
                    <span className="text-blue-700">Nível de Risco:</span>
                    <span className={`ml-2 font-medium ${
                      results.some(r => r.severity === 'high') ? 'text-red-600' :
                      results.some(r => r.severity === 'medium') ? 'text-yellow-600' : 'text-green-600'
                    }`}>
                      {results.some(r => r.severity === 'high') ? 'ALTO' :
                       results.some(r => r.severity === 'medium') ? 'MÉDIO' : 'BAIXO'}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTester;
