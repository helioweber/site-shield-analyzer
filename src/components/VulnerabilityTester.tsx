import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Shield, Bug, Globe, Server, MapPin, Wifi } from 'lucide-react';
import { useVulnerabilityTester } from '@/hooks/useVulnerabilityTester';
import VulnerabilityTestCard from './vulnerability/VulnerabilityTestCard';
import ServerInfoDisplay from './vulnerability/ServerInfoDisplay';
import TestProgressIndicator from './vulnerability/TestProgressIndicator';
import ExecutiveSummary from './vulnerability/ExecutiveSummary';

interface VulnerabilityTesterProps {
  url: string;
}

const VulnerabilityTester = ({ url }: VulnerabilityTesterProps) => {
  const {
    isLoading,
    results,
    hasRun,
    expandedResult,
    serverInfo,
    discoveredEndpoints,
    runVulnerabilityTests,
    toggleExpandedResult
  } = useVulnerabilityTester(url);

  return (
    <Card className="card-shadow">
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Shield className="w-5 h-5" />
          <span>Teste Avançado OWASP Top 10 2021</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg border border-blue-200">
            <div className="flex items-center space-x-2 mb-2">
              <Globe className="w-4 h-4" />
              <strong>Análise Completa OWASP Top 10 2021</strong>
            </div>
            <p><strong>Metodologia:</strong> Testes baseados na OWASP Top 10 2021 + Discovery automático</p>
            <p><strong>URL alvo:</strong> {url}</p>
            <p><strong>Testes incluídos:</strong> SQL Injection (A03), XSS (A03), RFI (A03), Security Headers (A05)</p>
            <p><strong>Critério de vulnerabilidade:</strong> Status 200 = Vulnerável | Status 403/400 = Protegido</p>
            
            {discoveredEndpoints.length > 0 && (
              <div className="mt-2 p-2 bg-white rounded border">
                <p className="text-xs font-medium text-gray-700 flex items-center space-x-1">
                  <MapPin className="w-3 h-3" />
                  <span>Endpoints descobertos para teste:</span>
                </p>
                <div className="text-xs text-gray-600 space-y-1 mt-1">
                  {discoveredEndpoints.map((endpoint, idx) => (
                    <p key={idx}>• {endpoint}</p>
                  ))}
                </div>
              </div>
            )}
            
            {serverInfo && (
              <div className="mt-2 p-2 bg-white rounded border">
                <p className="text-xs font-medium text-gray-700 flex items-center space-x-1">
                  <Server className="w-3 h-3" />
                  <span>Servidor detectado (análise real):</span>
                </p>
                <div className="text-xs text-gray-600 space-y-1 mt-1">
                  <p><strong>Server:</strong> {serverInfo.server}</p>
                  <p><strong>Remote Address:</strong> {serverInfo.remoteAddress}</p>
                  <p><strong>Protocol:</strong> {serverInfo.protocol}</p>
                  <p><strong>Response Time:</strong> {serverInfo.responseTime}ms</p>
                  {serverInfo.xPoweredBy && <p><strong>X-Powered-By:</strong> {serverInfo.xPoweredBy}</p>}
                </div>
              </div>
            )}
          </div>
          
          <Button 
            onClick={runVulnerabilityTests}
            disabled={isLoading}
            className="w-full"
            variant="outline"
          >
            {isLoading ? (
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div>
                <span>Executando testes OWASP Top 10...</span>
              </div>
            ) : (
              <div className="flex items-center space-x-2">
                <Bug className="w-4 h-4" />
                <span>Iniciar Varredura OWASP Top 10 2021</span>
              </div>
            )}
          </Button>

          {isLoading && <TestProgressIndicator />}

          {hasRun && results.length > 0 && (
            <div className="space-y-4 mt-6">
              <div className="flex items-center justify-between">
                <h4 className="font-semibold text-sm text-gray-700 flex items-center space-x-1">
                  <Wifi className="w-4 h-4" />
                  <span>Resultados da Varredura Avançada</span>
                </h4>
                <div className="text-xs text-gray-500">
                  Testado em: {new Date().toLocaleString('pt-BR')}
                </div>
              </div>

              {serverInfo && <ServerInfoDisplay serverInfo={serverInfo} />}
              
              {results.map((result, index) => (
                <VulnerabilityTestCard
                  key={index}
                  result={result}
                  index={index}
                  isExpanded={expandedResult === index}
                  serverInfo={serverInfo}
                  onToggleExpanded={toggleExpandedResult}
                />
              ))}
              
              <ExecutiveSummary 
                results={results} 
                discoveredEndpoints={discoveredEndpoints} 
                serverInfo={serverInfo} 
              />
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTester;
