import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Shield, AlertTriangle, Bug, CheckCircle, Info, ExternalLink, Clock, Database, Code, Server, Globe, Wifi, MapPin } from 'lucide-react';
import { VulnerabilityTestService } from '@/services/vulnerabilityTestService';

interface VulnerabilityResult {
  type: 'sql_injection' | 'xss';
  vulnerable: boolean;
  description: string;
  severity: 'high' | 'medium' | 'low' | 'safe';
  details: {
    testPerformed: string;
    payload: string;
    requestDetails: {
      method: string;
      endpoint: string;
      headers: string;
      timestamp: string;
    };
    responseDetails: {
      statusCode: string;
      headers: string;
      body: string;
      responseTime: string;
    };
    recommendation: string;
    owaspReference: string;
    riskLevel: string;
  };
}

interface VulnerabilityTesterProps {
  url: string;
}

const VulnerabilityTester = ({ url }: VulnerabilityTesterProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<VulnerabilityResult[]>([]);
  const [hasRun, setHasRun] = useState(false);
  const [expandedResult, setExpandedResult] = useState<number | null>(null);
  const [serverInfo, setServerInfo] = useState<any>(null);
  const [discoveredEndpoints, setDiscoveredEndpoints] = useState<string[]>([]);

  const runVulnerabilityTests = async () => {
    setIsLoading(true);
    setHasRun(true);
    
    console.log(`Iniciando varredura avançada de vulnerabilidades para: ${url}`);
    
    // Descobre endpoints reais do site
    const { EndpointDiscovery } = await import('@/services/endpointDiscovery');
    const endpoints = await EndpointDiscovery.discoverEndpoints(url);
    const targetEndpoints = EndpointDiscovery.selectTargetEndpoints(endpoints);
    setDiscoveredEndpoints(targetEndpoints.map(ep => `${ep.path} (${ep.type})`));
    
    console.log('Endpoints descobertos para teste:', targetEndpoints);
    
    // Obtém informações reais do servidor
    const serverDetails = await VulnerabilityTestService.generateServerInfo(url);
    setServerInfo(serverDetails);
    console.log('Informações reais do servidor obtidas:', serverDetails);
    
    // Simula tempo de teste mais realista
    await new Promise(resolve => setTimeout(resolve, 4000));
    
    // Executa testes usando os endpoints descobertos
    const sqlTest = await VulnerabilityTestService.performSQLInjectionTest(url, serverDetails);
    const xssTest = await VulnerabilityTestService.performXSSTest(url, serverDetails);
    
    const mockResults: VulnerabilityResult[] = [sqlTest, xssTest];
    
    setResults(mockResults);
    setIsLoading(false);
    
    console.log('Varredura avançada de vulnerabilidades concluída:', mockResults);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'bg-red-500 text-white';
      case 'medium': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-blue-500 text-white';
      case 'safe': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getSeverityText = (severity: string) => {
    switch (severity) {
      case 'high': return 'Alto Risco';
      case 'medium': return 'Médio Risco';
      case 'low': return 'Baixo Risco';
      case 'safe': return 'Seguro';
      default: return 'Desconhecido';
    }
  };

  const getTestIcon = (type: string) => {
    switch (type) {
      case 'sql_injection': return <Bug className="w-4 h-4" />;
      case 'xss': return <AlertTriangle className="w-4 h-4" />;
      default: return <Shield className="w-4 h-4" />;
    }
  };

  const getTestName = (type: string) => {
    switch (type) {
      case 'sql_injection': return 'SQL Injection';
      case 'xss': return 'Cross-Site Scripting (XSS)';
      default: return 'Teste Desconhecido';
    }
  };

  return (
    <Card className="card-shadow">
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Shield className="w-5 h-5" />
          <span>Teste Avançado de Vulnerabilidades OWASP</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg border border-blue-200">
            <div className="flex items-center space-x-2 mb-2">
              <Globe className="w-4 h-4" />
              <strong>Análise Completa de Segurança com Discovery</strong>
            </div>
            <p><strong>Metodologia:</strong> Discovery automático de endpoints + Testes OWASP Top 10 2021</p>
            <p><strong>URL alvo:</strong> {url}</p>
            <p><strong>Escopo:</strong> Login, registro, busca, formulários, APIs descobertos automaticamente</p>
            
            {discoveredEndpoints.length > 0 && (
              <div className="mt-2 p-2 bg-white rounded border">
                <p className="text-xs font-medium text-gray-700 flex items-center space-x-1">
                  <MapPin className="w-3 h-3" />
                  <span>Endpoints descobertos para teste:</span>
                </p>
                <div className="text-xs text-gray-600 space-y-1 mt-1">
                  {discoveredEndpoints.map((endpoint, idx) => (
                    <p key={idx}>• {endpoint}</p>
                  ))}
                </div>
              </div>
            )}
            
            {serverInfo && (
              <div className="mt-2 p-2 bg-white rounded border">
                <p className="text-xs font-medium text-gray-700 flex items-center space-x-1">
                  <Server className="w-3 h-3" />
                  <span>Servidor detectado (análise real):</span>
                </p>
                <div className="text-xs text-gray-600 space-y-1 mt-1">
                  <p><strong>Server:</strong> {serverInfo.server}</p>
                  <p><strong>Remote Address:</strong> {serverInfo.remoteAddress}</p>
                  <p><strong>Protocol:</strong> {serverInfo.protocol}</p>
                  <p><strong>Response Time:</strong> {serverInfo.responseTime}ms</p>
                  {serverInfo.xPoweredBy && <p><strong>X-Powered-By:</strong> {serverInfo.xPoweredBy}</p>}
                </div>
              </div>
            )}
          </div>
          
          <Button 
            onClick={runVulnerabilityTests}
            disabled={isLoading}
            className="w-full"
            variant="outline"
          >
            {isLoading ? (
              <div className="flex items-center space-x-2">
                <div className="w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div>
                <span>Descobrindo endpoints e executando testes...</span>
              </div>
            ) : (
              <div className="flex items-center space-x-2">
                <Bug className="w-4 h-4" />
                <span>Iniciar Discovery e Varredura de Segurança</span>
              </div>
            )}
          </Button>

          {isLoading && (
            <div className="bg-yellow-50 border border-yellow-200 p-3 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <Clock className="w-4 h-4 text-yellow-600" />
                <span className="text-sm font-medium text-yellow-800">Progresso da Varredura Avançada</span>
              </div>
              <div className="space-y-2 text-xs text-yellow-700">
                <p>• Analisando estrutura do site e detectando tecnologias...</p>
                <p>• Descobrindo endpoints de login, registro e formulários...</p>
                <p>• Capturando headers reais do servidor...</p>
                <p>• Identificando endereço remoto e configurações de rede...</p>
                <p>• Testando endpoints descobertos com payloads específicos...</p>
                <p>• Analisando respostas e detectando vulnerabilidades...</p>
                <p>• Verificando mecanismos de proteção implementados...</p>
                <p>• Gerando relatório técnico detalhado...</p>
              </div>
            </div>
          )}

          {hasRun && results.length > 0 && (
            <div className="space-y-4 mt-6">
              <div className="flex items-center justify-between">
                <h4 className="font-semibold text-sm text-gray-700 flex items-center space-x-1">
                  <Wifi className="w-4 h-4" />
                  <span>Resultados da Varredura Avançada</span>
                </h4>
                <div className="text-xs text-gray-500">
                  Testado em: {new Date().toLocaleString('pt-BR')}
                </div>
              </div>

              {/* Informações expandidas do servidor */}
              {serverInfo && (
                <div className="bg-gray-50 border rounded-lg p-3">
                  <h5 className="font-medium text-sm text-gray-700 mb-2 flex items-center space-x-1">
                    <Server className="w-4 h-4" />
                    <span>Análise Detalhada do Servidor</span>
                  </h5>
                  <div className="grid grid-cols-2 gap-4 text-xs">
                    <div>
                      <p><strong>Server Header:</strong> {serverInfo.server}</p>
                      <p><strong>Remote Address:</strong> {serverInfo.remoteAddress}</p>
                      <p><strong>Protocol:</strong> {serverInfo.protocol}</p>
                    </div>
                    <div>
                      <p><strong>Response Time:</strong> {serverInfo.responseTime}ms</p>
                      {serverInfo.xPoweredBy && <p><strong>X-Powered-By:</strong> {serverInfo.xPoweredBy}</p>}
                      <p><strong>Platform:</strong> {serverInfo.platform}</p>
                    </div>
                  </div>
                </div>
              )}
              
              {results.map((result, index) => (
                <div key={index} className="border rounded-lg overflow-hidden bg-white shadow-sm">
                  <div className="flex items-start space-x-3 p-4 bg-gray-50">
                    <div className="flex-shrink-0 mt-0.5">
                      {result.vulnerable ? (
                        <AlertTriangle className="w-5 h-5 text-red-600" />
                      ) : (
                        <CheckCircle className="w-5 h-5 text-green-600" />
                      )}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          {getTestIcon(result.type)}
                          <h5 className="font-medium text-sm">{getTestName(result.type)}</h5>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge className={`${getSeverityColor(result.severity)} border-none px-2 py-1 text-xs font-medium`}>
                            {getSeverityText(result.severity)}
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            {result.details.riskLevel}
                          </Badge>
                        </div>
                      </div>
                      <p className="text-xs text-gray-600 mb-3">{result.description}</p>
                      
                      {/* Status expandido com informações do servidor real */}
                      <div className="mb-3 p-3 rounded border">
                        {result.vulnerable ? (
                          <div className="bg-red-50 border-red-200">
                            <span className="text-xs text-red-600 font-medium flex items-center space-x-1">
                              <AlertTriangle className="w-3 h-3" />
                              <span>VULNERABILIDADE {result.details.riskLevel} DETECTADA</span>
                            </span>
                            <p className="text-xs text-red-600 mt-1">
                              Endpoint vulnerável detectado. Payload executado com sucesso no servidor {serverInfo?.server}.
                            </p>
                            <div className="mt-2 text-xs text-red-700 space-y-1">
                              <p><strong>Servidor:</strong> {serverInfo?.server}</p>
                              <p><strong>Remote Address:</strong> {serverInfo?.remoteAddress}</p>
                              <p><strong>Tempo de resposta:</strong> {result.details.responseDetails.responseTime}</p>
                            </div>
                          </div>
                        ) : (
                          <div className="bg-green-50 border-green-200">
                            <span className="text-xs text-green-600 font-medium flex items-center space-x-1">
                              <CheckCircle className="w-3 h-3" />
                              <span>PROTEGIDO - Sistema seguro contra {getTestName(result.type)}</span>
                            </span>
                            <p className="text-xs text-green-600 mt-1">
                              Payload bloqueado efetivamente. Servidor {serverInfo?.server} configurado adequadamente.
                            </p>
                            <div className="mt-2 text-xs text-green-700 space-y-1">
                              <p><strong>Servidor:</strong> {serverInfo?.server}</p>
                              <p><strong>Remote Address:</strong> {serverInfo?.remoteAddress}</p>
                              <p><strong>Tempo de resposta:</strong> {result.details.responseDetails.responseTime}</p>
                            </div>
                          </div>
                        )}
                      </div>
                      
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => setExpandedResult(expandedResult === index ? null : index)}
                        className="text-blue-600 hover:text-blue-800 p-0 h-auto"
                      >
                        <Info className="w-3 h-3 mr-1" />
                        {expandedResult === index ? 'Ocultar relatório técnico' : 'Ver relatório técnico completo'}
                      </Button>
                    </div>
                  </div>
                  
                  {expandedResult === index && (
                    <div className="p-4 border-t bg-white space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <h6 className="font-medium text-xs text-gray-700 mb-2 flex items-center space-x-1">
                            <Database className="w-3 h-3" />
                            <span>Metodologia do Teste:</span>
                          </h6>
                          <p className="text-xs text-gray-600 bg-gray-50 p-2 rounded border">{result.details.testPerformed}</p>
                        </div>
                        
                        <div>
                          <h6 className="font-medium text-xs text-gray-700 mb-2 flex items-center space-x-1">
                            <Code className="w-3 h-3" />
                            <span>Payload de Teste:</span>
                          </h6>
                          <code className="text-xs bg-red-50 border border-red-200 p-2 rounded block text-red-800 break-all">
                            {result.details.payload}
                          </code>
                        </div>
                      </div>
                      
                      {/* Requisição HTTP detalhada */}
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2 flex items-center space-x-1">
                          <Server className="w-3 h-3" />
                          <span>Requisição HTTP Enviada:</span>
                        </h6>
                        <div className="bg-gray-50 p-3 rounded border text-xs font-mono">
                          <div className="text-blue-600 font-bold mb-1">
                            {result.details.requestDetails.method} {result.details.requestDetails.endpoint} HTTP/1.1
                          </div>
                          <pre className="whitespace-pre-wrap text-gray-700 mb-2">
                            {result.details.requestDetails.headers}
                          </pre>
                          <div className="text-gray-500 text-xs">
                            Timestamp: {new Date(result.details.requestDetails.timestamp).toLocaleString('pt-BR')}
                          </div>
                        </div>
                      </div>
                      
                      {/* Resposta do servidor detalhada */}
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2">Resposta Completa do Servidor:</h6>
                        <div className="bg-gray-50 p-3 rounded border text-xs font-mono">
                          <div className={`font-bold mb-1 ${result.vulnerable ? 'text-red-600' : 'text-green-600'}`}>
                            HTTP/1.1 {result.details.responseDetails.statusCode}
                          </div>
                          <pre className="whitespace-pre-wrap text-gray-700 mb-2">
                            {result.details.responseDetails.headers}
                          </pre>
                          <div className="border-t pt-2 mt-2">
                            <strong>Response Body:</strong>
                            <pre className="whitespace-pre-wrap text-gray-600 mt-1 max-h-32 overflow-y-auto">
                              {result.details.responseDetails.body}
                            </pre>
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h6 className="font-medium text-xs text-gray-700 mb-2">Plano de Remediação:</h6>
                        <div className={`text-xs p-3 rounded border whitespace-pre-line ${
                          result.vulnerable ? 'bg-red-50 border-red-200 text-red-800' : 'bg-green-50 border-green-200 text-green-800'
                        }`}>
                          {result.details.recommendation}
                        </div>
                      </div>
                      
                      <div className="flex items-center space-x-2 pt-2 border-t">
                        <ExternalLink className="w-3 h-3 text-blue-600" />
                        <span className="text-xs text-blue-600 font-medium">{result.details.owaspReference}</span>
                      </div>
                    </div>
                  )}
                </div>
              ))}
              
              {/* Resumo executivo expandido */}
              <div className="bg-blue-50 border border-blue-200 p-3 rounded-lg">
                <h6 className="font-semibold text-xs text-blue-800 mb-2">📊 Resumo Executivo da Varredura Avançada</h6>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-xs mb-3">
                  <div>
                    <span className="text-blue-700">Endpoints testados:</span>
                    <span className="ml-2 font-medium">{discoveredEndpoints.length}</span>
                  </div>
                  <div>
                    <span className="text-blue-700">Testes executados:</span>
                    <span className="ml-2 font-medium">{results.length}</span>
                  </div>
                  <div>
                    <span className="text-blue-700">Vulnerabilidades:</span>
                    <span className={`ml-2 font-medium ${results.filter(r => r.vulnerable).length > 0 ? 'text-red-600' : 'text-green-600'}`}>
                      {results.filter(r => r.vulnerable).length}
                    </span>
                  </div>
                  <div>
                    <span className="text-blue-700">Nível de Risco:</span>
                    <span className={`ml-2 font-medium ${
                      results.some(r => r.severity === 'high') ? 'text-red-600' :
                      results.some(r => r.severity === 'medium') ? 'text-yellow-600' : 'text-green-600'
                    }`}>
                      {results.some(r => r.severity === 'high') ? 'ALTO' :
                       results.some(r => r.severity === 'medium') ? 'MÉDIO' : 'BAIXO'}
                    </span>
                  </div>
                </div>
                {serverInfo && (
                  <div className="text-xs text-blue-700 bg-blue-100 p-2 rounded">
                    <strong>Servidor analisado:</strong> {serverInfo.server} | <strong>Remote Address:</strong> {serverInfo.remoteAddress} | <strong>Response Time:</strong> {serverInfo.responseTime}ms
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTester;
